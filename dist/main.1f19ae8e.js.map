{"version":3,"sources":["main.js"],"names":["html","document","querySelector","style","string","string2","n","step","setTimeout","innerHTML","substring","window","scrollTo","length"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAX;AACA,IAAIC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;AACA,IAAIE,MAAM,wwCAAV,EAyCA;;AAEA,IAAIC,OAAO,GAAG,EAAd,EACA;AACA;AACA;AACA;;AACA,IAAIC,CAAC,GAAG,CAAR,EACA;;AACA,IAAIC,IAAI,GAAG,SAAPA,IAAO,GAAI;AACXC,EAAAA,UAAU,CAAC,YAAI;AACf;AACA;AACA,QAAIJ,MAAM,CAACE,CAAD,CAAN,KAAY,IAAhB,EAAqB;AACjBD,MAAAA,OAAO,IAAE,MAAT,CADiB,CACA;AACpB,KAFD,MAEM,IACFD,MAAM,CAACE,CAAD,CAAN,KAAY,GADV,EACc;AACZD,MAAAA,OAAO,IAAE,OAAT,CADY,CACO;AACtB,KAHC,MAIN;AACIA,MAAAA,OAAO,IAAED,MAAM,CAACE,CAAD,CAAf,CADJ,CACuB;AACtB;;AACDN,IAAAA,IAAI,CAACS,SAAL,GAAiBJ,OAAjB;AACCF,IAAAA,KAAK,CAACM,SAAN,GAAkBL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAmBJ,CAAnB,CAAlB,CAbc,CAa2B;;AACzCK,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAkB,IAAlB,EAdc,CAcU;;AACxBZ,IAAAA,IAAI,CAACY,QAAL,CAAc,CAAd,EAAgB,IAAhB;;AACD,QAAGN,CAAC,GAACF,MAAM,CAACS,MAAP,GAAc,CAAnB,EAAqB;AAACP,MAAAA,CAAC,IAAE,CAAH,CAAD,CAAM;;AACvBC,MAAAA,IAAI;AACP;AAEJ,GApBa,EAoBZ,EApBY,CAAV;AAoBE,CArBN;;AAuBAA,IAAI","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["let html = document.querySelector('#html');\r\nlet style = document.querySelector('#style')\r\nlet string = `/*你好，我是一名前端新人\r\n接下来我要演示我的前端功底\r\n首先 我要准备一个div*/   \r\n#div1{\r\n    width:200px;\r\n    height:200px;\r\n}\r\n/*吧div变成一个八卦图\r\n注意看好了首先把div1变成一个圆圈·*/\r\n#div1{\r\n    border-radius:50%;\r\n    box-shadow:0 0 3px rgba(0,0,0,0.5);\r\n    border:none;\r\n}\r\n/*八卦是阴阳形成的\r\n一黑一白*/\r\n#div1 {\r\n    background: linear-gradient(90deg, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%);\r\n}\r\n/*加上八卦的两个中心*/\r\n#div1::before {\r\n    width:100px;\r\n    height:100px;\r\n    top:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:#000;\r\n    border-radius:50%;\r\n    background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n#div1::after {\r\n    width:100px;\r\n    height:100px;\r\n    bottom:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:#fff;\r\n    border-radius:50%;\r\n    background: radial-gradient(circle, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%);\r\n}\r\n`;\r\n// css gradient background generator网址调混合色\r\n\r\nlet string2 = ''\r\n//js里面的回车会自动变为空格\r\n// string = string.replace('\\n','<br>') 这种写法只会把第一个\\n回车变为<br>回车\r\n// string = string.replace(/\\n/g,'<br>')这种方法有个弊端<br>回车是四个字符串并且在执行过程中会出现<来短暂表示执行时的回车\r\n// let n = -1;\r\nlet n = 0;\r\n// demo.innerHTML = string.substring(0,n); 为了改进string = string.replace(/\\n/g,'<br>')的弊端\r\nlet step = ()=>{\r\n    setTimeout(()=>{\r\n    // n = n+1;\r\n    // if可以简化string2+=(string[n]===\\n?<br>:string[n])\r\n    if (string[n]==='\\n'){\r\n        string2+='<br>'  // string2=string2+'<br>'可以使用简写\r\n    }else if(\r\n        string[n]===' '){\r\n            string2+='&nbsp'   // 空格要表示为&nbsp\r\n        }else\r\n    {\r\n        string2+=string[n] // string2=string2+string[n]\r\n    }\r\n    html.innerHTML = string2;\r\n     style.innerHTML = string.substring(0,n); //css中不能出现html标签的string2会将空格 回车变为<br> &nbsp\r\n     window.scrollTo(0,9999) //自动滚动用户窗口\r\n     html.scrollTo(0,9999)\r\n    if(n<string.length-1){n+=1 // 一个54个字符串，但是下标是从0开始的[n]应该到53就结束了，但是当到53的时候53<string.length，此时还会进行一次循环，会循环出undefined，所以应该改为string.length-1\r\n        step();\r\n    }\r\n    \r\n},10)};\r\n\r\nstep();\r\n"]}